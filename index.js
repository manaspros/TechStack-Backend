import express, { json } from "express";
import axios from "axios";
import cors from "cors";

const app = express();
app.use(json());
app.use(cors());

// Gemini API configuration
const GEMINI_API_KEY = "AIzaSyAfhH8XdItzko-ZbCDkbsembd8wqZ2jbHE";
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

// Enhanced system message with instruction to ask useful follow-up questions
const SYSTEM_MESSAGE = `You are a specialized tech learning assistant designed to help users learn any programming language, framework, or technology stack.
When users ask about a technology:
1. Provide accurate, up-to-date information about the technology
2. Be ready to create structured learning paths with clear steps
3. Focus on practical advice that helps users build skills progressively
4. Include specific resources, documentation links, and hands-on project recommendations
5. Break complex topics into manageable pieces for effective learning

Occasionally (about 30% of the time), include 1-2 thoughtful follow-up questions at the end of your responses. 
These questions should help the user think more deeply about what they're learning or prompt them to consider 
related concepts that would be useful for them to explore next. Format these as clear questions with question marks.`;

app.post("/chat", async (req, res) => {
  const { newChat, oldChats, generateLearningPath } = req.body;

  if (!newChat) {
    return res.status(400).json({ error: "newChat field is required." });
  }

  try {
    // Format conversation history for Gemini API
    const messages = [];

    // Add system message at the beginning
    messages.push({
      role: "model",
      parts: [{ text: SYSTEM_MESSAGE }],
    });

    // Add previous conversation history
    if (Array.isArray(oldChats) && oldChats.length > 0) {
      oldChats.forEach((chat) => {
        if (chat.role && chat.parts) {
          messages.push({
            role: chat.role,
            parts: [{ text: chat.parts }],
          });
        }
      });
    }

    // If requesting a learning path, modify the user query
    let userQuery = newChat;
    if (generateLearningPath) {
      userQuery = `Please create a detailed step-by-step learning path for ${newChat}. Include the following:
      1. Prerequisites I should know first
      2. Core concepts to master with clear progression
      3. Recommended resources for each step (documentation, tutorials, courses)
      4. Practice projects that build in complexity
      5. Advanced topics to explore after mastering the basics
      Format this as a clear, numbered learning path that I can follow over time.
      
      At the end, include 1-2 follow-up questions about how I plan to use this knowledge or what specific aspects I'm most interested in.`;
    }

    // Add the new message
    messages.push({
      role: "user",
      parts: [{ text: userQuery }],
    });

    // Call the Gemini API with properly formatted request
    const response = await axios.post(GEMINI_API_URL, {
      contents: messages,
    });

    // Extract the response from the Gemini API
    const generatedContent = response.data.candidates?.[0]?.content;

    if (!generatedContent) {
      throw new Error("No content generated by Gemini API");
    }

    // Return the formatted response
    return res.json({
      answer: generatedContent.parts?.[0]?.text || "No response text",
      role: generatedContent.role || "model",
      isLearningPath: !!generateLearningPath,
    });
  } catch (error) {
    console.error(
      "Error calling Gemini API:",
      error.response?.data || error.message
    );
    return res.status(500).json({
      error: "Internal server error.",
      details: error.response?.data || error.message,
    });
  }
});

// New endpoint to handle step explanations
app.post("/explain-step", async (req, res) => {
  const { stepId, stepTitle, stepType } = req.body;

  if (!stepTitle) {
    return res.status(400).json({ error: "stepTitle field is required." });
  }

  try {
    // Format a prompt for the explanation
    let prompt = '';
    
    switch(stepType) {
      case 'prerequisite':
        prompt = `Explain this prerequisite step in a learning journey: "${stepTitle}". 
        Include why this foundational knowledge is important, how to acquire it, 
        and 2-3 specific resources (like documentation, tutorials or books) that would help.
        Keep the explanation under 150 words and format with bullet points for key concepts.`;
        break;
      
      case 'core':
        prompt = `Explain this core concept in depth: "${stepTitle}". 
        Provide a clear explanation of what this involves, the key principles to understand, 
        common challenges learners face, and practical ways to master it.
        Include 1-2 example resources that provide the best explanations of this concept.
        Keep the explanation under 150 words and highlight important terms.`;
        break;
      
      case 'practice':
        prompt = `Explain this practice/project step: "${stepTitle}".
        Describe what skills this practice will develop, how to approach it step by step,
        common pitfalls to avoid, and how to know when you've mastered it.
        Suggest 1-2 specific project ideas that would help implement this knowledge.
        Keep the explanation under 150 words and be practical.`;
        break;
      
      case 'advanced':
        prompt = `Explain this advanced concept: "${stepTitle}".
        Detail why this is considered advanced, what prerequisites are needed,
        how it builds on earlier knowledge, and the specific benefits of mastering it.
        Mention 1-2 real-world applications where this is essential.
        Keep the explanation under 150 words and highlight what makes this topic powerful.`;
        break;
      
      default:
        prompt = `Explain this learning step in detail: "${stepTitle}".
        Include what it involves, why it's important, how to approach learning it,
        and 1-2 recommended resources.
        Keep the explanation under 150 words and be specific and practical.`;
    }

    // Call the Gemini API with the prompt
    const response = await axios.post(GEMINI_API_URL, {
      contents: [{
        role: "user",
        parts: [{ text: prompt }]
      }]
    });

    // Extract the response
    const generatedContent = response.data.candidates?.[0]?.content;

    if (!generatedContent) {
      throw new Error("No content generated by Gemini API");
    }

    // Return the explanation
    return res.json({
      explanation: generatedContent.parts?.[0]?.text || "No explanation available",
    });
  } catch (error) {
    console.error(
      "Error generating explanation:",
      error.response?.data || error.message
    );
    return res.status(500).json({
      error: "Failed to generate explanation",
      details: error.response?.data || error.message,
    });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});
